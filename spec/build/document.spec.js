// Generated by CoffeeScript 1.6.2
(function() {
  define(function(require) {
    var asDocument;

    asDocument = require('document');
    return describe('document', function() {
      var Animal, a;

      Animal = null;
      a = null;
      beforeEach(function() {
        Animal = (function() {
          function Animal() {
            this.key('name');
            this.validate('name', (function(name) {
              return name.length > 2 && name.length < 10;
            }), 'must be between 2 and 10 characters');
          }

          Animal.prototype.foo = 'bar';

          return Animal;

        })();
        Animal = asDocument(Animal);
        return a = new Animal;
      });
      describe('#meta', function() {
        it('should fetch a _meta property', function() {
          return expect(a.meta('keys')).toEqual({
            name: {}
          });
        });
        return it('should set a _meta property', function() {
          a.meta('foo', 'bar');
          return expect(a.meta('foo')).toBe('bar');
        });
      });
      describe('#key', function() {
        return it('should add a key', function() {
          expect(a._meta.keys.name).toBeDefined();
          return expect(a.name).not.toBe(null);
        });
      });
      describe('#toJSON', function() {
        return it('should return an object of just keyed properties', function() {
          var data;

          a.name = 'cat';
          a.attitude = 'sassy';
          data = a.toJSON();
          expect(data.name).toBe('cat');
          return expect(data.attitude).not.toBeDefined();
        });
      });
      describe('#validate', function() {});
      describe('#is_valid', function() {
        return it('should work', function() {
          a.name = 'bo';
          expect(a.isValid()).toBe(false);
          return expect(a._meta.errors.name[0]).toBe('must be between 2 and 10 characters');
        });
      });
      describe('#each', function() {
        return it('should iterate over properties that are defined as keys', function() {
          return a.each(function(v, k) {
            return expect(a._meta.keys[k]).toBeDefined();
          });
        });
      });
      return describe('#watch', function() {
        return it('should keep an eye on things...', function() {
          var changed;

          changed = false;
          a.name = 'foo';
          a.watch('name', (function() {
            return changed = true;
          }));
          a.name = 'bar';
          waitsFor(function() {
            return changed;
          });
          return runs(function() {
            return expect(changed).toBe(true);
          });
        });
      });
    });
  });

}).call(this);
